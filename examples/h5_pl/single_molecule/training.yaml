seed_everything: 6832135
ckpt_path: last
# define the training
trainer:
  # Work directory for the session
  default_root_dir: .
  # set a limit to the training (#epochs and/or time limit)
  max_epochs: 300
  max_time: null
  profiler: null
  # Training on one/multiple GPU
  accelerator: 'gpu'
  strategy: 'ddp'
  devices: 1
  precision: 32
  benchmark: false
  logger:
    - class_path: pytorch_lightning.loggers.TensorBoardLogger
      init_args:
        # save_dir will be set to default_root_dir
        save_dir: default_root_dir
        name: tensorboard
        version: ''
  enable_checkpointing: true
  callbacks:
    - class_path: pytorch_lightning.callbacks.LearningRateMonitor
      init_args:
        logging_interval: epoch
        log_momentum: false
    - class_path: mlcg.pl.OffsetCheckpoint
      init_args:
        start_epoch: 0
        dirpath: default_root_dir
        monitor: validation_loss
        save_top_k: -1
        every_n_epochs: 1
        filename: '{epoch}-{validation_loss:.5f}'
        save_last: true
  log_every_n_steps: 500
  gradient_clip_val: 10.0 #0
  gradient_clip_algorithm: norm
  check_val_every_n_epoch: 1
  fast_dev_run: false
  accumulate_grad_batches: 1 # you can change this to enable a even higher effective batch size
  deterministic: false
  detect_anomaly: false 
  enable_progress_bar: true # uncomment this in production (e.g., when redirecting the stdout to a file), otherwise it will generate huge a huge log file and harm the disk
optimizer:
  class_path: torch.optim.AdamW
  init_args:
    lr: 0.0001
    weight_decay: 0.01                                                                                                                                                                    
data:
  h5_file_path: ./1L2Y_prior_tag.h5
  partition_options: ./partition_1L2Y_prior_tag.yaml
  loading_options:
    hdf_key_mapping:
      embeds: attrs:cg_embeds
      coords: cg_coords
      forces: cg_delta_forces
model:
  loss:
    class_path: mlcg.nn.Loss
    init_args:
      losses:
        - class_path: mlcg.nn.ForceMSE
          init_args:
            force_kwd: forces
  model:
    class_path: mlcg.nn.GradientsOut
    init_args:
      targets: forces
      model:
        # definition of the model's hypers
        class_path: mlcg.nn.schnet.StandardSchNet
        init_args:
          hidden_channels: 128
          embedding_size: 25
          num_filters: 128
          num_interactions: 4
          output_hidden_layer_widths:
            - 128
            - 64
          activation:
            class_path: torch.nn.Tanh
            init_args: {}
          max_num_neighbors: 1000
          aggr: "add"
          cutoff:
            class_path: mlcg.nn.CosineCutoff
            init_args:
              cutoff_lower: 0
              cutoff_upper: 15
          rbf_layer:
            class_path: mlcg.nn.ExpNormalBasis
            init_args:
              cutoff: 15
              num_rbf: 64
              trainable: false

