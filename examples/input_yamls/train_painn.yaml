seed_everything: 19384
ckpt_path: null
# define the training
trainer:
  # Work directory for the session
  default_root_dir: .
  # set a limit to the training (#epochs and/or time limit)
  max_epochs: 6
  max_time: null
  profiler: null

  # Training on one/multiple GPU
  # accelerator: gpu
  # strategy: ddp_find_unused_parameters_false
  # devices: 4
  # precision: 32

  # Training on the CPU
  accelerator: 'cpu'
  devices: 1
  precision: 32

  benchmark: false
  logger:
    - class_path: pytorch_lightning.loggers.TensorBoardLogger
      init_args:
        # save_dir will be set to default_root_dir
        save_dir: default_root_dir
        name: tensorboard
        version: ''
  enable_checkpointing: true
  callbacks:
    - class_path: pytorch_lightning.callbacks.EarlyStopping
      init_args:
        monitor: 'validation_loss'
        patience: 10
    # Save states of the model a regular interval
    - class_path: pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint
      init_args:
        # checkpoints will be saved to default_root_dir/ckpt
        dirpath: default_root_dir
        monitor: validation_loss
        save_top_k: -1
        every_n_epochs: 2
        filename: '{epoch}-{validation_loss:.4f}'
        save_last: true
  log_every_n_steps: 10
  gradient_clip_val: 0
  gradient_clip_algorithm: norm
  check_val_every_n_epoch: 1
  fast_dev_run: false
  accumulate_grad_batches: 1
  deterministic: false
  detect_anomaly: true
# define the model and training objectives using mlcg.pl.PLModel
model:
  loss:
    class_path: mlcg.nn.Loss
    init_args:
      # list of losses to optimize
      losses:
        - class_path: mlcg.nn.ForceRMSE
          init_args:
            force_kwd: forces
  # model specifications
  model:
    class_path: mlcg.nn.GradientsOut
    init_args:
      targets: forces
      model:
        class_path: mlcg.nn.StandardPaiNN
        init_args:
          hidden_channels: 128
          embedding_size: 25
          num_interactions: 2
          activation: torch.nn.Tanh
          max_num_neighbors: 100
          output_hidden_layer_widths:
            - 128
            - 64
          rbf_layer:
            class_path: mlcg.nn.ExpNormalBasis
            init_args:
              cutoff:
                class_path: mlcg.nn.CosineCutoff
                init_args:
                  cutoff_lower: 0
                  cutoff_upper: 15.0
              num_rbf: 32
              trainable: false
          cutoff:
            class_path: mlcg.nn.CosineCutoff
            init_args:
              cutoff_lower: 0
              cutoff_upper: 15.0

optimizer:
  class_path: torch.optim.AdamW
  init_args:
    lr: 0.0001
    weight_decay: 0
lr_scheduler:
  class_path: pytorch_lightning.cli.ReduceLROnPlateau
  init_args:
    factor: 0.8
    patience: 5
    min_lr: 0.00001
    monitor: validation_loss
# define the dataset through mlcg.pl.DataModule
data:
  dataset:
    class_path: mlcg.datasets.ChignolinDataset
    init_args:
      root: /path/to/save/dataset/
  log_dir: default_root_dir
  val_ratio: 0.1
  test_ratio: 0.
  batch_size: 256
  inference_batch_size: 256
  num_workers: 0
  loading_stride: 1
  save_local_copy: false
