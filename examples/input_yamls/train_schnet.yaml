seed_everything: 16384
trainer:
  # Work directory for the session
  default_root_dir: .
  max_epochs: 150
  accelerator: cpu
  num_nodes: 1
  precision: 32
  logger:
    - class_path: pytorch_lightning.loggers.TensorBoardLogger
      init_args:
        save_dir: default_root_dir
        name: tensorboard
        version: ''
  benchmark: false
  enable_checkpointing: true
  callbacks:
    - class_path: pytorch_lightning.callbacks.LearningRateMonitor
      init_args:
        logging_interval: epoch
        log_momentum: false
    - class_path: pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint
      init_args:
        dirpath: default_root_dir
        monitor: validation_loss
        save_top_k: -1
        every_n_epochs: 1
        filename: '{epoch}-{validation_loss:.4f}'
        save_last: true
  log_every_n_steps: 100
  gradient_clip_val: 0
  gradient_clip_algorithm: norm
  track_grad_norm: -1
  check_val_every_n_epoch: 1
  fast_dev_run: false
  accumulate_grad_batches: 4 #
  enable_model_summary: false
  deterministic: false
  auto_lr_find: false
  detect_anomaly: false # setting this to true enables detection of NaN after every small-batch update, but will slow down the training by 30%~50%
  enable_progress_bar: True # un
model:
  loss:
    class_path: mlcg.nn.Loss
    init_args:
      # list of losses to optimize
      losses:
        - class_path: mlcg.nn.ForceRMSE
          init_args:
            force_kwd: forces
  # model specifications
  model:
    class_path: mlcg.nn.GradientsOut
    init_args:
      targets: forces
      model:
        class_path: mlcg.nn.schnet.StandardSchNet
        init_args:
          hidden_channels: 128
          embedding_size: 50
          num_filters: 128
          num_interactions: 2
          output_hidden_layer_widths:
            - 100
            - 60
            - 30
          activation:
            class_path: torch.nn.Tanh
            init_args: {}
          max_num_neighbors: 20
          aggr: "add"
          cutoff:
            class_path: mlcg.nn.CosineCutoff
            init_args:
              cutoff_lower: 0
              cutoff_upper: 15
          rbf_layer:
            class_path: mlcg.nn.ExpNormalBasis
            init_args:
              cutoff: 15
              num_rbf: 30
              trainable: false
optimizer:
  class_path: torch.optim.AdamW
  init_args:
    lr: 0.0001
    weight_decay: 0
# define the dataset through mlcg.pl.DataModule
data:
  dataset:
    class_path: mlcg.datasets.ChignolinDataset
    init_args:
      root: /path/to/save/dataset/
  log_dir: default_root_dir
  val_ratio: 0.1
  test_ratio: 0.
  batch_size: 256
  inference_batch_size: 256
  num_workers: 0
  loading_stride: 1
  save_local_copy: false
